import React, { useState, useEffect } from "react";
import { deleteDoc, doc } from "firebase/firestore";
import { collection, query, where, getDocs, getDoc } from "firebase/firestore";
import { db } from "../firebase";
import { Link } from "react-router-dom";
import "../styles/pages/MyEvent.css";

function MyEvents({ user }) {
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
  const [createdEvents, setCreatedEvents] = useState([]);
  const [participatingEvents, setParticipatingEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showParticipants, setShowParticipants] = useState(null);
  const [participantsList, setParticipantsList] = useState([]);
  const [loadingParticipants, setLoadingParticipants] = useState(false);

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  useEffect(() => {
    const fetchMyEvents = async () => {
      if (!user) return;
      try {
        const createdQuery = query(
          collection(db, "events"),
          where("creatorId", "==", user.uid)
        );

        const participatingQuery = query(
          collection(db, "events"),
          where("participants", "array-contains", user.uid)
        );

        const [createdSnapshot, participatingSnapshot] = await Promise.all([
          getDocs(createdQuery),
          getDocs(participatingQuery),
        ]);

        const createdEventsData = createdSnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));

        const participatingEventsData = participatingSnapshot.docs.map(
          (doc) => ({
            id: doc.id,
            ...doc.data(),
          })
        );

        setCreatedEvents(createdEventsData);
        setParticipatingEvents(participatingEventsData);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ", error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchMyEvents();
  }, [user]);

  const handleShowParticipants = async (eventId, participantIds = []) => {
    setLoadingParticipants(true);

    try {
      const participantsData = [];

      for (const userId of participantIds) {
        const userDoc = await getDoc(doc(db, "users", userId));
        if (userDoc.exists()) {
          participantsData.push({
            id: userDoc.id,
            ...userDoc.data(),
          });
        }
      }

      setParticipantsList(participantsData);
      setShowParticipants(eventId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", error);
    } finally {
      setLoadingParticipants(false);
    }
  };

  const handleCloseModal = () => {
    setShowParticipants(null);
    setParticipantsList([]);
  };

  const handleDeleteEvent = async (eventId) => {
    try {
      if (!window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?")) {
        return;
      }
      await deleteDoc(doc(db, "events", eventId));
      setCreatedEvents((prev) => prev.filter((event) => event.id !== eventId));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ");
    }
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...</p>
      </div>
    );
  }

  return (
    <div className="my-events-container">
      <h2 className="page-title">–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h2>

      {/* –°–µ–∫—Ü–∏—è "–Ø —Å–æ–∑–¥–∞–ª" */}
      <section className="events-section">
        <div className="section-header">
          <h3 className="section-title">–Ø —Å–æ–∑–¥–∞–ª</h3>
          <span className="events-count">{createdEvents.length}</span>
        </div>

        {createdEvents.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üéØ</div>
            <p className="empty-text">
              –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            </p>
            <Link to="/create" className="create-link">
              –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            </Link>
          </div>
        ) : (
          <div className="events-grid">
            {createdEvents.map((event) => (
              <div
                key={event.id}
                className={`event-card ${!isMobile ? "hoverable" : ""}`}
              >
                <div className="event-header">
                  <h4 className="event-title">{event.title}</h4>
                  <span className="organizer-badge">–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä</span>
                </div>

                <p className="event-description">{event.description}</p>

                <div className="event-details">
                  <div className="detail-item">
                    <div className="detail-label">üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</div>
                    <div className="detail-value">
                      {event.date} {event.time}
                    </div>
                  </div>
                  <div className="detail-item">
                    <div className="detail-label">üìç –ú–µ—Å—Ç–æ</div>
                    <div className="detail-value">{event.location}</div>
                  </div>
                  <div className="detail-item">
                    <div className="detail-label">üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
                    <div className="detail-value">
                      {event.participants?.length || 0}
                    </div>
                  </div>
                </div>

                <div className="event-actions">
                  <button
                    onClick={() =>
                      handleShowParticipants(event.id, event.participants || [])
                    }
                    className="btn btn-primary"
                    disabled={loadingParticipants}
                  >
                    {loadingParticipants && showParticipants === event.id
                      ? "–ó–∞–≥—Ä—É–∑–∫–∞..."
                      : "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏"}
                  </button>

                  <button
                    onClick={() => handleDeleteEvent(event.id)}
                    className="btn btn-danger"
                  >
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </section>

      {/* –°–µ–∫—Ü–∏—è "–Ø —É—á–∞—Å—Ç–≤—É—é" */}
      <section className="events-section">
        <div className="section-header">
          <h3 className="section-title">–Ø —É—á–∞—Å—Ç–≤—É—é</h3>
          <span className="events-count">{participatingEvents.length}</span>
        </div>

        {participatingEvents.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üåü</div>
            <p className="empty-text">
              –í—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            </p>
          </div>
        ) : (
          <div className="events-grid">
            {participatingEvents.map((event) => (
              <div
                key={event.id}
                className={`event-card ${!isMobile ? "hoverable" : ""}`}
              >
                <h4 className="event-title">{event.title}</h4>

                <p className="event-description">{event.description}</p>

                <div className="event-details">
                  <div className="detail-item">
                    <div className="detail-label">üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</div>
                    <div className="detail-value">
                      {event.date} {event.time}
                    </div>
                  </div>
                  <div className="detail-item">
                    <div className="detail-label">üìç –ú–µ—Å—Ç–æ</div>
                    <div className="detail-value">{event.location}</div>
                  </div>
                  <div className="detail-item">
                    <div className="detail-label">üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä</div>
                    <div className="detail-value">{event.creatorEmail}</div>
                  </div>
                </div>

                {event.creatorId === user.uid && (
                  <button
                    onClick={() =>
                      handleShowParticipants(event.id, event.participants || [])
                    }
                    className="btn btn-primary btn-small"
                    disabled={loadingParticipants}
                  >
                    {loadingParticipants && showParticipants === event.id
                      ? "–ó–∞–≥—Ä—É–∑–∫–∞..."
                      : "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏"}
                  </button>
                )}
              </div>
            ))}
          </div>
        )}
      </section>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
      {showParticipants && (
        <>
          <div className="modal-overlay" onClick={handleCloseModal} />
          <div className="modal">
            <div className="modal-header">
              <h3 className="modal-title">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h3>
              <button onClick={handleCloseModal} className="close-button">
                ‚úï
              </button>
            </div>

            {participantsList.length === 0 ? (
              <div className="empty-participants">
                <div className="empty-icon">üë•</div>
                <p className="empty-text">
                  –£ —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                </p>
              </div>
            ) : (
              <ul className="participants-list">
                {participantsList.map((participant) => (
                  <li key={participant.id} className="participant-item">
                    <div className="participant-info">
                      <strong className="participant-email">
                        {participant.email}
                      </strong>
                      {participant.displayName && (
                        <span className="participant-name">
                          {participant.displayName}
                        </span>
                      )}
                    </div>
                    <span className="participant-badge">–£—á–∞—Å—Ç–Ω–∏–∫</span>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </>
      )}
    </div>
  );
}

export default MyEvents;
